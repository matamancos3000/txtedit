import os
import pandas as pd
import re
from datetime import datetime, timedelta
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill
from openpyxl.chart import PieChart, Reference

# === CONFIGURACIÓN ===
input_file = r"C:\Logs-Reporttoken\log-consentrado-JULIO-AGOSTO-SEPTIEMBRE.csv"
output_file = input_file.replace(".csv", "-procesado.xlsx")

# === LEER ARCHIVO ===
df = pd.read_csv(input_file, encoding="utf-8-sig", dtype={"MSISDN": str})

# === PARSEAR FECHAS ===
# CreatedOn → formato "SEP 19 2025 7:06AM"
df["CreatedOn"] = pd.to_datetime(df["CreatedOn"], format="%b %d %Y %I:%M%p", errors="coerce")
df["CreatedOn"] = df["CreatedOn"] + timedelta(hours=6)  # ajuste de 6 horas

# FECHA DE TRABAJO → puede tener HH:mm o HH:mm:ss
def parse_fecha_trabajo(valor):
    if pd.isna(valor):
        return None
    for fmt in ("%d/%m/%Y %H:%M:%S", "%d/%m/%Y %H:%M"):
        try:
            return datetime.strptime(valor, fmt)
        except:
            continue
    return None

df["FECHA DE TRABAJO"] = df["FECHA DE TRABAJO"].astype(str).apply(parse_fecha_trabajo)

# FECHA DE NACIMIENTO → dd/MM/yyyy hh:mm:ss AM/PM
def parse_fecha_nac(valor):
    if pd.isna(valor):
        return None
    for fmt in ("%d/%m/%Y %I:%M:%S %p", "%d/%m/%Y %I:%M %p", "%d/%m/%Y"):
        try:
            return datetime.strptime(valor, fmt)
        except:
            continue
    return None

df["FECHA DE NACIMIENTO"] = df["FECHA DE NACIMIENTO"].astype(str).apply(parse_fecha_nac)

# === CALCULAR MINUTOS DE RESPUESTA ===
def calcular_minutos(row):
    created = row["CreatedOn"]
    trabajado = row["FECHA DE TRABAJO"]

    if pd.isna(created) or trabajado is None:
        return None

    if created.hour >= 22 or created.hour < 6:
        return "Horario bot inactivo"

    diff = (trabajado - created).total_seconds() / 60
    return round(diff)

df["Minutos de respuesta"] = df.apply(calcular_minutos, axis=1)

# === CLASIFICAR INTERVALOS ===
def clasificar_intervalo(valor):
    if isinstance(valor, str):
        return valor
    if pd.isna(valor):
        return None
    if valor < 10:
        return "menos de 10 minutos"
    elif 11 <= valor <= 20:
        return "de 11 a 20 minutos"
    elif 21 <= valor <= 30:
        return "de 21 a 30 minutos"
    elif 31 <= valor <= 60:
        return "de 30 a 60 minutos"
    else:
        return "más de 60 minutos"

df["Intervalo"] = df["Minutos de respuesta"].apply(clasificar_intervalo)

# === HOMOGENEIZAR DETALLES (regex) ===
def limpiar_detalles(texto):
    if not isinstance(texto, str):
        return texto
    texto = texto.strip()

    if re.match(r"^El restablecimiento fuera de linea no se pudo completar por estado: 'Aprobado'", texto):
        return "Aprobado por otro medio"
    elif re.match(r"^El restablecimiento fuera de linea no se pudo completar por estado:", texto):
        return "No tiene Solicitud vigente"
    elif re.match(r"^Error de sistema.*", texto):
        return "Error de sistema"
    elif re.match(r"^Productos y servicios.*", texto):
        return "Error en obtener registro por voz"
    return texto

df["DETALLES"] = df["DETALLES"].apply(limpiar_detalles)

# === EXPORTAR A EXCEL ===
with pd.ExcelWriter(output_file, engine="openpyxl",
                    date_format="DD/MM/YYYY HH:MM:SS",
                    datetime_format="DD/MM/YYYY HH:MM:SS") as writer:
    df.to_excel(writer, sheet_name="Logs", index=False)

    # Crear hoja de resumen
    resumen = df["Intervalo"].value_counts().reset_index()
    resumen.columns = ["Intervalo", "Cantidad"]
    resumen.to_excel(writer, sheet_name="Resumen", index=False)

# === APLICAR ESTILOS Y GRAFICA ===
wb = load_workbook(output_file)

# --- Estilo en hoja "Logs"
ws_logs = wb["Logs"]
for cell in ws_logs[1]:
    cell.font = Font(bold=True, color="FFFFFF")
    cell.fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

# --- Estilo en hoja "Resumen"
ws_resumen = wb["Resumen"]
for cell in ws_resumen[1]:
    cell.font = Font(bold=True, color="FFFFFF")
    cell.fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

# --- Insertar gráfica
chart = PieChart()
labels = Reference(ws_resumen, min_col=1, min_row=2, max_row=ws_resumen.max_row)
data = Reference(ws_resumen, min_col=2, min_row=1, max_row=ws_resumen.max_row)
chart.add_data(data, titles_from_data=True)
chart.set_categories(labels)
chart.title = "Distribución por Intervalo"

ws_resumen.add_chart(chart, "D2")

# Guardar cambios
wb.save(output_file)

print(f"\n✅ Archivo procesado y embellecido generado en: {output_file}")
