import os
import re
import csv
from pathlib import Path
from bs4 import BeautifulSoup

# -------------------------
# CONFIGURACIÓN
# -------------------------
CARPETA_RAIZ = Path(r"../calidad2025/")   # Carpeta raíz de instructivos
URL_SHAREPOINT = "https://teams.global.hsbc/sites/labpspyas-2019/CALIDAD20251"
LOG_CSV = CARPETA_RAIZ / "../log_cambios.csv"
LOG_PRINTS = CARPETA_RAIZ / "../log_prints.txt"

# Extensiones de office/pdf a considerar
EXTS_OFFICE = (".docx", ".pdf", ".xlsx", ".pptx", ".doc", ".xls", ".xlsm")

# -------------------------
# LOGGING
# -------------------------
def log_print(msg):
    """Imprime en consola y guarda en log_prints.txt"""
    print(msg)
    with open(LOG_PRINTS, "a", encoding="utf-8") as f:
        f.write(str(msg) + "\n")

def registrar_cambio(archivo_html, tipo, enlace_original, enlace_nuevo):
    """Guarda un registro en el log CSV"""
    with open(LOG_CSV, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([archivo_html, tipo, enlace_original, enlace_nuevo])

# -------------------------
# FUNCIONES PRINCIPALES
# -------------------------
def convertir_enlaces(html_path):
    """Procesa un archivo HTML y reemplaza enlaces según reglas"""
    try:
        with open(html_path, "r", encoding="utf-8") as f:
            soup = BeautifulSoup(f, "html.parser")

        enlaces = soup.find_all("a", href=True)
        cambios = 0

        for enlace in enlaces:
            href = enlace["href"]
            original = href

            # --- 1) Reemplazo de .htm/.html por .pdf en SharePoint ---
            if href.lower().endswith((".htm", ".html")):
                ruta_relativa = os.path.relpath(html_path, CARPETA_RAIZ).replace("\\", "/")
                carpeta_rel = os.path.dirname(ruta_relativa)
                base = os.path.splitext(os.path.basename(href))[0]
                nuevo = f"{URL_SHAREPOINT}/{carpeta_rel}/{base}.pdf"
                enlace["href"] = nuevo
                registrar_cambio(str(html_path), "HTM->PDF", original, nuevo)
                cambios += 1

            # --- 2) Archivos Office/PDF que contengan calidad2021/formato2021 ---
            elif any(href.lower().endswith(ext) for ext in EXTS_OFFICE):
                if "calidad2021" in href.lower():
                    nuevo = re.sub(
                        r".*calidad2021[/\\]formato2021[/\\]?",
                        f"{URL_SHAREPOINT}/Formatos2021/",
                        href,
                        flags=re.IGNORECASE,
                    )
                    enlace["href"] = nuevo
                    registrar_cambio(str(html_path), "RECURSO", original, nuevo)
                    cambios += 1

        if cambios > 0:
            with open(html_path, "w", encoding="utf-8") as f:
                f.write(str(soup))

        log_print(f"{html_path} -> {cambios} enlaces modificados")

    except Exception as e:
        log_print(f"ERROR procesando {html_path}: {e}")

def procesar_carpeta(carpeta_raiz):
    """Busca y procesa todos los .htm en la carpeta y subcarpetas"""
    procesados = set()

    for html_path in carpeta_raiz.rglob("*.htm"):
        if "_archivos" in str(html_path.parent):  
            # --- 1) No procesar carpetas *_archivos ---
            continue
        if html_path in procesados:
            continue
        convertir_enlaces(html_path)
        procesados.add(html_path)

    for html_path in carpeta_raiz.rglob("*.html"):
        if "_archivos" in str(html_path.parent):
            continue
        if html_path in procesados:
            continue
        convertir_enlaces(html_path)
        procesados.add(html_path)

# -------------------------
# MAIN
# -------------------------
if __name__ == "__main__":
    # Inicializar logs
    with open(LOG_CSV, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["archivo_html", "tipo_archivo", "enlace_original", "enlace_nuevo"])

    with open(LOG_PRINTS, "w", encoding="utf-8") as f:
        f.write("=== LOG DE EJECUCIÓN ===\n")

    log_print(f"Procesando instructivos en {CARPETA_RAIZ}")
    procesar_carpeta(CARPETA_RAIZ)
    log_print("Proceso terminado ✅")
