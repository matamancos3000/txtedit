import os
import re
import csv
import shutil
from pathlib import Path

# === CONFIGURACIÓN PRINCIPAL ===
CARPETA_RAIZ = Path(r"../calidad2025")   # Carpeta raíz donde están todos los instructivos
URL_SHAREPOINT_BASE = "https://teams.global.hsbc/sites/labpspyas-2019/CALIDAD20251/"
LOG_CSV = CARPETA_RAIZ / "../log_cambios.csv"

# === EXTENSIONES QUE SE CONVIERTEN A PDF ===
EXT_HTML = [".htm", ".html"]

# === EXTENSIONES DE ARCHIVOS DE RECURSOS ===
EXT_RECURSOS = [".docx", ".pdf", ".xlsx", ".pptx", ".doc", ".xls", ".xlsm"]

# === CONTROL DE ARCHIVOS PROCESADOS ===
procesados = set()

# === FUNCIÓN: REGISTRAR CAMBIOS EN CSV ===
def registrar_cambio(archivo_html, tipo, enlace_original, enlace_nuevo):
    try:
        with open(LOG_CSV, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([archivo_html, tipo, enlace_original, enlace_nuevo])
    except Exception as e:
        print(f"[ERROR] No se pudo registrar en log: {e}")

# === FUNCIÓN: CONVERTIR ENLACES ===
def convertir_enlaces(contenido, ruta_html):
    cambios = 0

    # 1. Reemplazo de links a otros instructivos (.htm / .html → .pdf)
    for match in re.finditer(r'href="([^"]+?)(\.htm[l]?)"', contenido, flags=re.IGNORECASE):
        enlace_original = match.group(0)
        ruta_relativa = match.group(1)

        # Evitar tocar enlaces que apunten a carpetas _archivos
        if "_archivos" in ruta_relativa.lower():
            continue

        # Generar la ruta final en SharePoint (respetando subcarpetas)
        ruta_pdf = Path(ruta_html.parent / ruta_relativa).with_suffix(".pdf")
        ruta_relativa_a_raiz = ruta_pdf.relative_to(CARPETA_RAIZ)
        enlace_nuevo = f'href="{URL_SHAREPOINT_BASE}{ruta_relativa_a_raiz.as_posix()}"'

        contenido = contenido.replace(enlace_original, enlace_nuevo)
        registrar_cambio(str(ruta_html), "HTML→PDF", enlace_original, enlace_nuevo)
        cambios += 1

    # 2. Reemplazo de links de recursos (solo los que tengan "calidad2021/formato2021/")
    patron_recursos = re.compile(r'href="([^"]*calidad2021/formato2021/[^"]+)"', flags=re.IGNORECASE)
    for match in patron_recursos.finditer(contenido):
        enlace_original = match.group(1)

        # Quitar todo hasta "formato2021/"
        partes = re.split(r"calidad2021/formato2021/", enlace_original, flags=re.IGNORECASE)
        if len(partes) > 1:
            ruta_relativa = partes[1]
            enlace_nuevo = f'href="{URL_SHAREPOINT_BASE}Formatos2021/{ruta_relativa}"'

            contenido = contenido.replace(f'href="{enlace_original}"', enlace_nuevo)
            registrar_cambio(str(ruta_html), "RECURSO", enlace_original, enlace_nuevo)
            cambios += 1

    return contenido, cambios

# === FUNCIÓN: PROCESAR UN ARCHIVO HTML ===
def procesar_html(html_path):
    if html_path in procesados:
        return  # Evita procesar el mismo archivo dos veces
    procesados.add(html_path)

    try:
        with open(html_path, "r", encoding="utf-8") as f:
            contenido = f.read()

        nuevo_contenido, cambios = convertir_enlaces(contenido, html_path)

        if cambios > 0:
            with open(html_path, "w", encoding="utf-8") as f:
                f.write(nuevo_contenido)
            print(f"[OK] {html_path} → {cambios} cambios")
        else:
            print(f"[NO CAMBIOS] {html_path}")

    except Exception as e:
        print(f"[ERROR] Procesando {html_path}: {e}")

# === FUNCIÓN PRINCIPAL: RECORRER CARPETA ===
def procesar_carpeta(carpeta_raiz):
    # Inicializar log si no existe
    if not LOG_CSV.exists():
        with open(LOG_CSV, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["archivo_html", "tipo_archivo", "enlace_original", "enlace_nuevo"])

    for root, dirs, files in os.walk(carpeta_raiz):
        # Saltar carpetas de recursos *_archivos
        if any(d.lower().endswith("_archivos") for d in root.split(os.sep)):
            continue

        for file in files:
            if Path(file).suffix.lower() in EXT_HTML:
                procesar_html(Path(root) / file)

# === EJECUCIÓN ===
if __name__ == "__main__":
    procesar_carpeta(CARPETA_RAIZ)
    print("\nProceso terminado. Revisa log_cambios.csv")
