import re
from pathlib import Path
import shutil
import os
import csv

# ================== CONFIGURACI√ìN ==================
# Carpeta ra√≠z que contiene todos los instructivos
CARPETA_RAIZ = Path(r"C:\Users\45056372\Desktop\prueba its\calidad2025")

# Carpeta de recursos
CARPETA_DE_RECURSOS = "Formatos2021"

# URL base de SharePoint
URL_SHAREPOINT = "https://teams.global.hsbc/sites/labpspyas-2019/CALIDAD20251/"

# Carpeta de salida (se sobrescriben los .htm)
CARPETA_SALIDA = CARPETA_RAIZ

# Log de cambios
LOG_CSV = CARPETA_RAIZ.parent / "log_cambios.csv"


# ================== FUNCIONES ==================
def convertir_enlaces(contenido):
    """
    Convierte enlaces dentro de un HTML:
    - .htm/.html ‚Üí .pdf en SharePoint respetando ruta relativa
    - Documentos con href que contenga 'calidad2021/formato2021/' ‚Üí SharePoint
    """
    cambios = []

    def reemplazar_enlace(match):
        comilla = match.group(1)
        href = match.group(2)
        nombre_base, extension = os.path.splitext(os.path.basename(href))
        extension = extension.lower()

        # Caso 1: enlaces a HTML ‚Üí convertir a PDF
        if extension in [".htm", ".html"]:
            nuevo_href = Path(href).with_suffix(".pdf")
            nuevo = f"{URL_SHAREPOINT}{nuevo_href.as_posix()}"
            cambios.append((href, nuevo, "HTML->PDF"))
            return f'href={comilla}{nuevo}{comilla}'

        # Caso 2: documentos de office/pdf ‚Üí solo si contienen 'calidad2021/formato2021/'
        elif extension in [".docx", ".pdf", ".xlsx", ".pptx", ".doc", ".xls", ".xlsm"]:
            href_norm = href.replace("\\", "/")
            if "calidad2021/formato2021/" in href_norm.lower():
                # Tomamos la parte despu√©s de 'formato2021/' y agregamos al URL_SHAREPOINT
                partes = href_norm.lower().split("formato2021/", 1)
                nuevo = f"{URL_SHAREPOINT}Formatos2021/{partes[1]}"
                cambios.append((href, nuevo, extension.upper().strip(".")))
                return f'href={comilla}{nuevo}{comilla}'
            else:
                return match.group(0)

        else:
            return match.group(0)

    patron = r'href=(["\'])([^"\']+\.(?:htm[l]?|docx|pdf|xlsx|pptx|doc|xls|xlsm))\1'
    nuevo_contenido = re.sub(patron, reemplazar_enlace, contenido, flags=re.IGNORECASE)
    return nuevo_contenido, cambios


def procesar_html(html_path):
    """Lee un HTML y convierte enlaces."""
    encoding = 'utf-8'
    try:
        with open(html_path, 'r', encoding=encoding) as f:
            contenido = f.read()
    except UnicodeDecodeError:
        encoding = 'latin-1'
        with open(html_path, 'r', encoding=encoding) as f:
            contenido = f.read()

    contenido_mod, cambios = convertir_enlaces(contenido)
    return contenido_mod, encoding, cambios


def copiar_estructura(html_path):
    """
    No modifica nada dentro de la carpeta _archivos.
    Solo asegura que exista.
    """
    html_name = html_path.stem
    carpeta_archivos = html_path.parent / f"{html_name}_archivos"
    if carpeta_archivos.exists():
        # Se deja intacta
        pass


def registrar_cambios(archivo_html, cambios):
    """Registra los cambios en CSV sin fecha."""
    existe = LOG_CSV.exists()
    with open(LOG_CSV, 'a', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        if not existe:
            writer.writerow(["Archivo HTML", "Tipo", "Enlace original", "Enlace nuevo"])

        for original, nuevo, tipo in cambios:
            writer.writerow([archivo_html, tipo, original, nuevo])


# ================== PROCESO PRINCIPAL ==================
print("Iniciando conversi√≥n en carpeta ra√≠z:", CARPETA_RAIZ)

procesados = set()  # Para evitar procesar dos veces el mismo archivo

for html_file in CARPETA_RAIZ.rglob("*.[hH][tT][mM]*"):
    if html_file.is_file() and '_archivos' not in str(html_file.parent) and html_file not in procesados:
        print(f"\n‚óè Procesando: {html_file.relative_to(CARPETA_RAIZ)}")
        procesados.add(html_file)
        cambios = []
        try:
            contenido_mod, encoding, cambios = procesar_html(html_file)
            html_file.write_text(contenido_mod, encoding=encoding)
            copiar_estructura(html_file)

            if cambios:
                registrar_cambios(str(html_file.relative_to(CARPETA_RAIZ)), cambios)
                print(f"   ‚úÖ {len(cambios)} enlace(s) modificado(s)")
            else:
                print("   ‚ö†Ô∏è No se encontraron enlaces relevantes")

        except Exception as e:
            print(f"   ‚ùå Error en {html_file.name}: {str(e)}")
            # Registrar cambios si hubo antes del error
            if cambios:
                registrar_cambios(str(html_file.relative_to(CARPETA_RAIZ)), cambios)
                print(f"   ‚ö†Ô∏è {len(cambios)} enlace(s) registrados pese al error")

print("\n‚úî Proceso completado.")
print("üìë Log de cambios en:", LOG_CSV)
