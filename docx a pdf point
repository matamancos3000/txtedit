import os
import win32com.client as win32
import re
from urllib.parse import quote
from pathlib import Path

# Configuración de rutas
CARPETA_HTML = Path(r"C:\Users\Erick Baez\Documents\html a pdf\ejemplos")
CARPETA_SALIDA = Path(r"C:\Users\Erick Baez\Documents\html a pdf\ejemplos\salida")
URL_SHAREPOINT = "https://tubanco.sharepoint.com/sites/misitio/Documentos%20compartidos/Carpeta/"

# Crear carpeta de salida si no existe
CARPETA_SALIDA.mkdir(parents=True, exist_ok=True)

def procesar_html(html_path):
    """Procesa el archivo HTML y ajusta rutas para Word"""
    with open(html_path, 'r', encoding='utf-8', errors='ignore') as f:
        contenido = f.read()
    
    html_dir = html_path.parent
    html_name = html_path.stem
    
    # 1. Actualizar enlaces .htm/.html a PDFs en SharePoint
    patron_href = r'(href=["\'])((?!https?://|mailto:)[^"\']*\.htm[l]?)(["\'])'
    def actualizar_href(match):
        prefijo, nombre_archivo, sufijo = match.group(1), match.group(2), match.group(3)
        if not nombre_archivo.startswith(('http://', 'https://', 'mailto:')):
            nombre_base = Path(nombre_archivo).stem
            return f'{prefijo}{URL_SHAREPOINT}{quote(nombre_base)}.pdf{sufijo}'
        return match.group(0)
    
    contenido = re.sub(patron_href, actualizar_href, contenido, flags=re.IGNORECASE)
    
    # 2. Ajustar rutas de imágenes en la carpeta _archivos
    patron_img = r'(src=["\'])((?!https?://|data:)[^"\']*\.(?:jpg|jpeg|png|gif|bmp|svg|webp|ico))(["\'])'
    def actualizar_img(match):
        prefijo, ruta_img, sufijo = match.group(1), match.group(2), match.group(3)
        
        if ruta_img.startswith(('http://', 'https://', 'data:')):
            return match.group(0)
            
        # Manejar rutas relativas a la carpeta _archivos
        if '_archivos' in ruta_img or 'image' in ruta_img.lower():
            # Construir ruta completa a la imagen
            img_path = html_dir / f"{html_name}_archivos" / Path(ruta_img).name
            
            if img_path.exists():
                # Formato que Word entiende (ruta absoluta)
                return f'{prefijo}file:///{img_path.resolve().as_posix()}{sufijo}'
            else:
                print(f"  [!] Imagen no encontrada: {img_path}")
        
        return match.group(0)
    
    contenido = re.sub(patron_img, actualizar_img, contenido, flags=re.IGNORECASE)
    
    return contenido

def convertir_a_word_pdf(html_path, output_dir):
    """Convierte el archivo HTML a Word y PDF"""
    nombre_base = html_path.stem
    temp_html = output_dir / f"temp_{html_path.name}"
    
    try:
        # Procesar y guardar HTML temporal
        contenido = procesar_html(html_path)
        temp_html.write_text(contenido, encoding='utf-8')
        
        # Iniciar Word
        word = win32.DispatchEx('Word.Application')  # Nueva instancia independiente
        word.Visible = False
        
        try:
            # Convertir a Word (usando OpenXML para mejor compatibilidad)
            doc = word.Documents.Open(str(temp_html))
            
            # Actualizar campos y vínculos
            word.ActiveDocument.Fields.Update()
            
            # Guardar como DOCX
            docx_path = output_dir / f"{nombre_base}.docx"
            doc.SaveAs(str(docx_path), FileFormat=16)  # wdFormatDocumentDefault
            
            # Guardar como PDF
            pdf_path = output_dir / f"{nombre_base}.pdf"
            doc.SaveAs(str(pdf_path), FileFormat=17)  # wdFormatPDF
            
            doc.Close()
            return True
        except Exception as e:
            print(f"  [!] Error en Word: {str(e)}")
            return False
        finally:
            word.Quit()
    except Exception as e:
        print(f"  [!] Error general: {str(e)}")
        return False
    finally:
        if temp_html.exists():
            temp_html.unlink()

# Procesar todos los archivos HTML/HTM
print("Iniciando conversión de archivos guardados como página web completa...")
exitosos = 0

for html_file in CARPETA_HTML.glob("*.[hH][tT][mM]*"):
    print(f"\nProcesando: {html_file.name}")
    
    if convertir_a_word_pdf(html_file, CARPETA_SALIDA):
        print(f"  ✔ Convertido: {html_file.stem}.docx/pdf")
        exitosos += 1
    else:
        print(f"  ✖ Falló la conversión: {html_file.name}")

print(f"\nProceso completado. Archivos exitosos: {exitosos}/{len(list(CARPETA_HTML.glob('*.[hH][tT][mM]*')))}")
