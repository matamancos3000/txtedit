import re
from pathlib import Path
import urllib.parse
import shutil
import os

# Configuración
CARPETA_HTML = Path(r"C:\Users\45056372\Desktop\prueba its")
CARPETA_SALIDA = Path(r"C:\Users\45056372\Desktop\prueba its\salida")
URL_SHAREPOINT = "https://tubanco.sharepoint.com/sites/misitio/Documentos%20compartidos/Carpeta/"

# Crear carpeta de salida
CARPETA_SALIDA.mkdir(parents=True, exist_ok=True)

def convertir_enlaces(contenido):
    """Convierte todos los enlaces .htm/.html a .pdf manteniendo el mismo nombre base"""
    patron = r'''
        href=                 # Atributo href
        (["\'])               # Grupo 1: Comilla simple o doble
        ([^"\']+?\.htm[l]?)   # Grupo 2: Nombre del archivo con extensión .htm o .html
        \1                    # Misma comilla de cierre
    '''
    
    def reemplazar_enlace(match):
        comilla = match.group(1)
        nombre_archivo = match.group(2)
        
        # Extraer solo el nombre base
        nombre_base = os.path.splitext(os.path.basename(nombre_archivo))[0]
        
        # Construir nuevo enlace con URL codificada
        return f'href={comilla}{URL_SHAREPOINT}{urllib.parse.quote(nombre_base)}.pdf{comilla}'
    
    return re.sub(patron, reemplazar_enlace, contenido, flags=re.IGNORECASE | re.VERBOSE)

def procesar_html(html_path):
    """Procesa el archivo HTML cambiando solo los enlaces .htm/.html"""
    try:
        # Intentar UTF-8
        with open(html_path, 'r', encoding='utf-8') as f:
            contenido = f.read()
    except UnicodeDecodeError:
        # Si falla, usar Latin-1 (mantiene acentos y caracteres especiales)
        with open(html_path, 'r', encoding='latin-1') as f:
            contenido = f.read()
    
    # Convertir enlaces
    contenido_modificado = convertir_enlaces(contenido)
    return contenido_modificado

def copiar_estructura(html_path, output_dir):
    """Copia el archivo HTML y su carpeta de recursos asociada"""
    # Copiar archivo principal
    shutil.copy2(html_path, output_dir)
    
    # Copiar carpeta _archivos si existe
    html_name = html_path.stem
    carpeta_archivos = html_path.parent / f"{html_name}_archivos"
    
    if carpeta_archivos.exists():
        dest_dir = output_dir / f"{html_name}_archivos"
        shutil.copytree(carpeta_archivos, dest_dir, dirs_exist_ok=True)

# Proceso principal
print("Iniciando conversión de enlaces .htm/.html a .pdf...")

for html_file in CARPETA_HTML.glob("*.[hH][tT][mM]*"):
    if html_file.is_file() and '_archivos' not in str(html_file.parent):
        print(f"\n● Procesando: {html_file.name}")
        
        try:
            # Procesar HTML
            contenido = procesar_html(html_file)
            
            # Guardar archivo modificado
            output_path = CARPETA_SALIDA / html_file.name
            output_path.write_text(contenido, encoding='utf-8')
            
            # Copiar estructura asociada
            copiar_estructura(html_file, CARPETA_SALIDA)
            
            # Mostrar ejemplo de enlace cambiado
            enlaces = re.findall(r'href=["\'][^"\']*\.pdf["\']', contenido)
            if enlaces:
                print(f"  ✅ Enlace modificado: {enlaces[0][:70]}...")
            else:
                print("  ⚠ No se encontraron enlaces .htm/.html para convertir")
                
        except Exception as e:
            print(f"  ❌ Error procesando {html_file.name}: {str(e)}")

print("\n✔ Proceso completado. Archivos en:", CARPETA_SALIDA)
