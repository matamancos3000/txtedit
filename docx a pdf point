import re
from pathlib import Path
import urllib.parse
import shutil

# Configuración
CARPETA_HTML = Path(r"C:\Users\Erick Baez\Documents\html a pdf\ejemplos")
CARPETA_SALIDA = Path(r"C:\Users\Erick Baez\Documents\html a pdf\ejemplos\salida")
URL_SHAREPOINT = "https://tubanco.sharepoint.com/sites/misitio/Documentos%20compartidos/Carpeta/"

# Crear carpeta de salida
CARPETA_SALIDA.mkdir(parents=True, exist_ok=True)

def es_archivo_adjunto(ruta):
    """Determina si el archivo está dentro de una carpeta _archivos"""
    return '_archivos' in str(ruta.parent)

def procesar_html(html_path):
    """Procesa el HTML y repara rutas, excluyendo archivos en _archivos"""
    if es_archivo_adjunto(html_path):
        print(f"  ↳ [Omitido] Archivo adjunto: {html_path.name}")
        return None
        
    with open(html_path, 'r', encoding='utf-8', errors='ignore') as f:
        contenido = f.read()
    
    # Actualizar enlaces a PDF en SharePoint (solo para archivos principales)
    contenido = re.sub(
        r'href=["\']([^"\']*\.htm[l]?)["\']',
        lambda m: f'href="{URL_SHAREPOINT}{urllib.parse.quote(Path(m.group(1)).stem)}.pdf"',
        contenido,
        flags=re.IGNORECASE
    )
    
    # Reparar rutas de imágenes locales
    contenido = re.sub(
        r'src=["\']((?!https?://|data:)[^"\']*\.(?:jpe?g|png|gif|bmp|svg|webp|ico))["\']',
        lambda m: f'src="{reparar_ruta_imagen(html_path, m.group(1))}"',
        contenido,
        flags=re.IGNORECASE
    )
    
    return contenido

def reparar_ruta_imagen(html_path, ruta_img):
    """Convierte rutas de imágenes a formato absoluto"""
    # (Mantener la misma implementación anterior)
    # ...

def copiar_recursos(html_path, output_dir):
    """Copia toda la estructura _archivos sin modificar"""
    # Copiar archivo principal (si no es un adjunto)
    if not es_archivo_adjunto(html_path):
        shutil.copy2(html_path, output_dir)
    
    # Copiar carpeta _archivos completa
    html_name = html_path.stem
    carpeta_archivos = html_path.parent / f"{html_name}_archivos"
    
    if carpeta_archivos.exists():
        dest_dir = output_dir / carpeta_archivos.name
        shutil.copytree(carpeta_archivos, dest_dir, dirs_exist_ok=True)

# Proceso principal
print("Iniciando procesamiento (archivos en _archivos no serán modificados)...")

for html_file in CARPETA_HTML.rglob("*.[hH][tT][mM]*"):
    print(f"\n● Archivo encontrado: {html_file}")
    
    if es_archivo_adjunto(html_file):
        print("  ↳ [Omitido] Es un archivo adjunto")
        continue
        
    try:
        contenido = procesar_html(html_file)
        if contenido:
            output_path = CARPETA_SALIDA / html_file.name
            output_path.write_text(contenido, encoding='utf-8')
            copiar_recursos(html_file, CARPETA_SALIDA)
            print(f"  ✅ Procesado: {html_file.name}")
    except Exception as e:
        print(f"  ❌ Error procesando {html_file.name}: {str(e)}")

print("\nProceso completado. Se conservaron todos los archivos en _archivos sin modificaciones.")
