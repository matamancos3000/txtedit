import re
from pathlib import Path
import urllib.parse
import shutil

# Configuración
CARPETA_HTML = Path(r"C:\Users\Erick Baez\Documents\html a pdf\ejemplos")
CARPETA_SALIDA = Path(r"C:\Users\Erick Baez\Documents\html a pdf\ejemplos\salida")
URL_SHAREPOINT = "https://tubanco.sharepoint.com/sites/misitio/Documentos%20compartidos/Carpeta/"

# Crear carpeta de salida
CARPETA_SALIDA.mkdir(parents=True, exist_ok=True)

def reparar_ruta_imagen(html_path, ruta_img):
    """Convierte rutas de imágenes a formato absoluto"""
    html_dir = html_path.parent
    html_name = html_path.stem
    
    # Caso 1: Ruta en carpeta _archivos
    if '_archivos' in ruta_img.lower():
        parts = [p for p in re.split(r'[/\\]', ruta_img) if p]
        img_name = parts[-1]
        img_path = html_dir / f"{html_name}_archivos" / img_name
    else:
        img_path = html_dir / ruta_img
    
    # Devolver ruta original si no existe
    return str(img_path.resolve()) if img_path.exists() else ruta_img

def procesar_html(html_path):
    """Procesa el HTML y repara rutas"""
    with open(html_path, 'r', encoding='utf-8', errors='ignore') as f:
        contenido = f.read()
    
    # Actualizar enlaces a PDF en SharePoint
    contenido = re.sub(
        r'href=["\']([^"\']*\.htm[l]?)["\']',
        lambda m: f'href="{URL_SHAREPOINT}{urllib.parse.quote(Path(m.group(1)).stem)}.pdf"',
        contenido,
        flags=re.IGNORECASE
    )
    
    # Reparar rutas de imágenes locales (solo src)
    contenido = re.sub(
        r'src=["\']((?!https?://|data:)[^"\']*\.(?:jpe?g|png|gif|bmp|svg|webp|ico))["\']',
        lambda m: f'src="{reparar_ruta_imagen(html_path, m.group(1))}"',
        contenido,
        flags=re.IGNORECASE
    )
    
    return contenido

def copiar_archivos_adjuntos(html_path, output_dir):
    """Copia la carpeta _archivos a la carpeta de salida"""
    html_name = html_path.stem
    carpeta_archivos = html_path.parent / f"{html_name}_archivos"
    
    if carpeta_archivos.exists() and carpeta_archivos.is_dir():
        dest_dir = output_dir / f"{html_name}_archivos"
        shutil.copytree(carpeta_archivos, dest_dir, dirs_exist_ok=True)

# Proceso principal
print("Iniciando modificación de archivos HTM...")

for html_file in CARPETA_HTML.glob("*.[hH][tT][mM]*"):
    print(f"\nProcesando: {html_file.name}")
    
    try:
        # Procesar contenido HTML
        contenido_modificado = procesar_html(html_file)
        
        # Guardar nuevo archivo
        output_path = CARPETA_SALIDA / html_file.name
        output_path.write_text(contenido_modificado, encoding='utf-8')
        
        # Copiar archivos adjuntos (_archivos)
        copiar_archivos_adjuntos(html_file, CARPETA_SALIDA)
        
        print(f"  ✅ Archivo modificado guardado en: {output_path}")
    except Exception as e:
        print(f"  ❌ Error al procesar {html_file.name}: {str(e)}")

print("\nProceso completado. Archivos modificados en:", CARPETA_SALIDA)
