import re
from pathlib import Path
import urllib.parse
import shutil
import os

# Configuraci√≥n
CARPETA_HTML = Path(r"C:\Users\45056372\Desktop\prueba its")
CARPETA_SALIDA = Path(r"C:\Users\45056372\Desktop\prueba its\salida")
URL_SHAREPOINT = "https://tubanco.sharepoint.com/sites/misitio/Documentos%20compartidos/Carpeta/"

# Crear carpeta de salida
CARPETA_SALIDA.mkdir(parents=True, exist_ok=True)

def convertir_enlace_seguro(nombre_archivo):
    """Convierte el nombre del archivo preservando acentos y caracteres especiales"""
    # Primero obtener el nombre base sin extensi√≥n
    nombre_base = os.path.splitext(nombre_archivo)[0]
    
    # Codificar solo los caracteres que realmente necesitan codificaci√≥n en URLs
    # Manteniendo acentos y caracteres especiales legibles
    partes = []
    for char in nombre_base:
        if char.isalnum() or char in ('-', '_', '.', '~'):
            partes.append(char)
        else:
            partes.append(urllib.parse.quote(char, safe=''))
    
    return ''.join(partes)

def procesar_html(html_path):
    """Procesa el HTML cambiando enlaces .htm/.html a .pdf conservando acentos"""
    with open(html_path, 'r', encoding='utf-8', errors='ignore') as f:
        contenido = f.read()
    
    # Funci√≥n para convertir enlaces .htm/.html a .pdf conservando acentos
    def convertir_enlace(match):
        comilla = match.group(1)
        nombre_archivo = match.group(2)
        nombre_seguro = convertir_enlace_seguro(nombre_archivo)
        return f'href={comilla}{URL_SHAREPOINT}{nombre_seguro}.pdf{comilla}'
    
    # Patr√≥n mejorado para detectar enlaces
    patron = r'href=(["\'])([^"\']*\.htm[l]?)(["\'])'
    
    contenido = re.sub(
        patron,
        convertir_enlace,
        contenido,
        flags=re.IGNORECASE
    )
    
    return contenido

def copiar_estructura(html_path, output_dir):
    """Copia el archivo y su estructura adjunta"""
    # Copiar archivo principal
    shutil.copy2(html_path, output_dir)
    
    # Copiar carpeta _archivos si existe
    html_name = html_path.stem
    carpeta_archivos = html_path.parent / f"{html_name}_archivos"
    
    if carpeta_archivos.exists():
        dest_dir = output_dir / f"{html_name}_archivos"
        shutil.copytree(carpeta_archivos, dest_dir, dirs_exist_ok=True)

# Proceso principal
print("Iniciando conversi√≥n conservando acentos y caracteres especiales...")

for html_file in CARPETA_HTML.glob("*.[hH][tT][mM]*"):
    if html_file.is_file() and '_archivos' not in str(html_file.parent):
        print(f"\n‚óè Procesando: {html_file.name}")
        
        try:
            # Procesar HTML
            contenido = procesar_html(html_file)
            
            # Guardar archivo modificado
            output_path = CARPETA_SALIDA / html_file.name
            output_path.write_text(contenido, encoding='utf-8')
            
            # Copiar estructura adjunta
            copiar_estructura(html_file, CARPETA_SALIDA)
            
            # Mostrar ejemplo de enlace modificado
            enlaces_modificados = re.findall(r'href=["\'][^"\']*\.pdf["\']', contenido)
            if enlaces_modificados:
                primer_enlace = enlaces_modificados[0]
                print(f"  ‚úÖ Enlace modificado: {primer_enlace[:100]}...")
                print(f"  üîç ¬øSe conservan los acentos?: {'√°√©√≠√≥√∫' in primer_enlace}")
            
        except Exception as e:
            print(f"  ‚ùå Error procesando {html_file.name}: {str(e)}")

print("\n‚úî Proceso completado. Archivos en:", CARPETA_SALIDA)
