import os
import win32com.client as win32
import re
from pathlib import Path
import urllib.parse

# Configuraci√≥n
CARPETA_HTML = Path(r"C:\Users\Erick Baez\Documents\html a pdf\ejemplos")
CARPETA_SALIDA = Path(r"C:\Users\Erick Baez\Documents\html a pdf\ejemplos\salida")
URL_SHAREPOINT = "https://tubanco.sharepoint.com/sites/misitio/Documentos%20compartidos/Carpeta/"

# Crear carpeta de salida
CARPETA_SALIDA.mkdir(parents=True, exist_ok=True)

def reparar_ruta_imagen(html_path, ruta_img):
    """Convierte rutas de im√°genes a formato absoluto que Word pueda entender"""
    html_dir = html_path.parent
    html_name = html_path.stem
    
    # Caso 1: Ruta relativa directa (ej: "imagen.jpg")
    if not any(sep in ruta_img for sep in ('/', '\\')):
        img_path = html_dir / ruta_img
    
    # Caso 2: Ruta en carpeta _archivos (ej: "IT-CC-05_archivos/image001.jpg")
    elif '_archivos' in ruta_img.lower() or 'image' in ruta_img.lower():
        parts = [p for p in ruta_img.replace('\\', '/').split('/') if p]
        img_name = parts[-1]
        img_path = html_dir / f"{html_name}_archivos" / img_name
    
    # Caso 3: Ruta relativa con subdirectorios (ej: "assets/imagen.jpg")
    else:
        img_path = html_dir / ruta_img
    
    # Verificar existencia y convertir a formato Word
    if img_path.exists():
        # Formato file:/// para Word (ruta absoluta en formato URI)
        return f"file:///{urllib.parse.quote(str(img_path.resolve()).replace('\\', '/'))}"
    
    # Diagn√≥stico si no se encuentra
    print(f"\n[DIAGN√ìSTICO] No se encontr√≥ la imagen: {ruta_img}")
    print(f"Busc√≥ en: {img_path}")
    print(f"Archivos en la carpeta: {list(html_dir.glob('*'))}")
    if '_archivos' in ruta_img.lower():
        archivos_dir = html_dir / f"{html_name}_archivos"
        if archivos_dir.exists():
            print(f"Archivos en {archivos_dir}: {list(archivos_dir.glob('*'))}")
        else:
            print(f"¬°La carpeta {archivos_dir} no existe!")
    
    return ruta_img  # Si no se encuentra, mantener original

def procesar_html(html_path):
    """Procesa el HTML y repara rutas de im√°genes"""
    with open(html_path, 'r', encoding='utf-8', errors='ignore') as f:
        contenido = f.read()
    
    # Actualizar enlaces a PDF en SharePoint
    contenido = re.sub(
        r'href=["\']([^"\']*\.htm[l]?)["\']',
        lambda m: f'href="{URL_SHAREPOINT}{urllib.parse.quote(Path(m.group(1)).stem)}.pdf"',
        contenido,
        flags=re.IGNORECASE
    )
    
    # Reparar rutas de im√°genes
    contenido = re.sub(
        r'src=["\']([^"\']*\.(?:jpg|jpeg|png|gif|bmp|svg|webp|ico))["\']',
        lambda m: f'src="{reparar_ruta_imagen(html_path, m.group(1))}"',
        contenido,
        flags=re.IGNORECASE
    )
    
    return contenido

def convertir_archivo(html_path):
    """Convierte un archivo HTML a Word y PDF"""
    nombre_base = html_path.stem
    temp_html = CARPETA_SALIDA / f"temp_{html_path.name}"
    
    try:
        # Paso 1: Procesar HTML
        contenido = procesar_html(html_path)
        temp_html.write_text(contenido, encoding='utf-8')
        
        # Paso 2: Convertir con Word
        word = win32.DispatchEx('Word.Application')
        word.Visible = False
        
        try:
            doc = word.Documents.Open(str(temp_html))
            
            # Forzar actualizaci√≥n de campos y v√≠nculos
            word.ActiveDocument.Fields.Update()
            word.ActiveDocument.Reload()
            
            # Guardar resultados
            doc.SaveAs(str(CARPETA_SALIDA / f"{nombre_base}.docx"), FileFormat=16)
            doc.SaveAs(str(CARPETA_SALIDA / f"{nombre_base}.pdf"), FileFormat=17)
            
            doc.Close()
            return True
        finally:
            word.Quit()
    except Exception as e:
        print(f"Error al convertir {html_path.name}: {str(e)}")
        return False
    finally:
        if temp_html.exists():
            temp_html.unlink()

# Proceso principal
print("Iniciando conversi√≥n con diagn√≥stico mejorado...")

for html_file in CARPETA_HTML.glob("*.[hH][tT][mM]*"):
    print(f"\n‚óè Procesando: {html_file.name}")
    
    if convertir_archivo(html_file):
        print(f"  ‚úÖ Conversi√≥n exitosa")
    else:
        print(f"  ‚ùå Fall√≥ la conversi√≥n")
        
    # Guardar HTML modificado para diagn√≥stico
    debug_html = CARPETA_SALIDA / f"DEBUG_{html_file.name}"
    debug_html.write_text(procesar_html(html_file), encoding='utf-8')
    print(f"  üîç HTML modificado guardado en: {debug_html}")

print("\nProceso completado. Revise los archivos DEBUG_*.htm para ver las rutas generadas.")
