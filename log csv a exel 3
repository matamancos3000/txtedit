import os
import pandas as pd
import re
from datetime import datetime, timedelta
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill
from openpyxl.chart import BarChart, Reference

# === CONFIGURACIÓN ===
INPUT_DIR = r"C:\Logs-Reporttoken"  # Carpeta de entrada con CSV
OUTPUT_DIR = r"C:\Logs-Reporttoken\CSV-procesado"  # Carpeta para CSVs procesados
OUTPUT_DIR_EXCEL = r"C:\Logs-Reporttoken\Reporte-procesado"  # Carpeta para Excels procesados

os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs(OUTPUT_DIR_EXCEL, exist_ok=True)

# === FUNCIONES AUXILIARES ===
def parse_fecha_trabajo(valor):
    if pd.isna(valor):
        return None
    for fmt in ("%d/%m/%Y %H:%M:%S", "%d/%m/%Y %H:%M"):
        try:
            return datetime.strptime(str(valor), fmt)
        except:
            continue
    return None

def parse_fecha_nac(valor):
    if pd.isna(valor):
        return None
    valor = str(valor).lower().replace("a. m.", "AM").replace("p. m.", "PM")
    for fmt in ("%d/%m/%Y %I:%M:%S %p", "%d/%m/%Y %I:%M %p", "%d/%m/%Y"):
        try:
            return datetime.strptime(valor, fmt)
        except:
            continue
    return None

def calcular_minutos(row):
    created, trabajado = row.get("CreatedOn"), row.get("FECHA DE TRABAJO")
    if pd.isna(created) or trabajado is None:
        return None
    if created.hour >= 22 or created.hour < 6:
        return "Horario bot inactivo"
    return round((trabajado - created).total_seconds() / 60)

def clasificar_intervalo(valor):
    if isinstance(valor, str):
        return valor
    if pd.isna(valor):
        return None
    if valor <= 10:
        return "menos de 10 minutos"
    elif valor <= 20:
        return "de 11 a 20 minutos"
    elif valor <= 30:
        return "de 21 a 30 minutos"
    elif valor <= 60:
        return "de 30 a 60 minutos"
    else:
        return "más de 60 minutos"

def limpiar_detalles(texto):
    if not isinstance(texto, str):
        return texto
    texto = texto.strip()
    if re.match(r"^El restablecimiento fuera de línea no se pudo completar por estado: 'Aprobado'", texto, re.IGNORECASE):
        return "Aprobado por otro medio"
    elif re.match(r"^El restablecimiento fuera de línea no se pudo completar por estado:", texto, re.IGNORECASE):
        return "No tiene Solicitud vigente"
    elif re.search(r"Error de sistema", texto, re.IGNORECASE):
        return "Error de sistema"
    elif re.match(r"^Productos y Servicios.*", texto, re.IGNORECASE):
        return "Error en obtener registro por voz"
    return texto

# === PROCESAR TODOS LOS CSV ===
for file in os.listdir(INPUT_DIR):
    if not file.lower().endswith(".csv"):
        continue

    input_file = os.path.join(INPUT_DIR, file)
    output_csv = os.path.join(OUTPUT_DIR, file.replace(".csv", "-procesado.csv"))
    output_excel = os.path.join(OUTPUT_DIR_EXCEL, file.replace(".csv", "-procesado.xlsx"))

    print(f"🔄 Procesando {file}...")

    # === LEER ARCHIVO ===
    df = pd.read_csv(input_file, encoding="utf-8-sig", dtype={"MSISDN": str})

    # Validar columnas mínimas
    columnas_necesarias = ["CreatedOn", "FECHA DE TRABAJO", "FECHA DE NACIMIENTO", "DETALLES"]
    for col in columnas_necesarias:
        if col not in df.columns:
            raise ValueError(f"❌ Falta la columna requerida: {col}")

    # === PARSEAR FECHAS ===
    df["CreatedOn"] = pd.to_datetime(df["CreatedOn"], format="%b %d %Y %I:%M%p", errors="coerce") + timedelta(hours=6)
    df["FECHA DE TRABAJO"] = df["FECHA DE TRABAJO"].apply(parse_fecha_trabajo)
    df["FECHA DE NACIMIENTO"] = df["FECHA DE NACIMIENTO"].apply(parse_fecha_nac)

    # === CALCULOS ===
    df["Minutos de respuesta"] = df.apply(calcular_minutos, axis=1)
    df["Intervalo"] = df["Minutos de respuesta"].apply(clasificar_intervalo)
    df["DETALLES"] = df["DETALLES"].apply(limpiar_detalles)

    # === RESUMEN POR DÍA + INTERVALO ===
    df["Fecha"] = df["CreatedOn"].dt.strftime("%d/%m/%Y")
    pivot = pd.pivot_table(
        df,
        index="Fecha",
        columns="Intervalo",
        values="MSISDN",
        aggfunc="count",
        fill_value=0
    )
    # Orden de columnas fijo
    orden_intervalos = [
        "menos de 10 minutos", "de 11 a 20 minutos",
        "de 21 a 30 minutos", "de 30 a 60 minutos",
        "más de 60 minutos", "Horario bot inactivo"
    ]
    pivot = pivot.reindex(columns=orden_intervalos, fill_value=0)
    pivot["Total"] = pivot.sum(axis=1)

    # === RESUMEN POR DETALLES ===
    resumen_detalles = df["DETALLES"].value_counts().reset_index()
    resumen_detalles.columns = ["DETALLES", "Cantidad"]

    # === EXPORTAR CSV ===
    df.to_csv(output_csv, index=False, encoding="utf-8-sig")

    # === EXPORTAR EXCEL ===
    with pd.ExcelWriter(output_excel, engine="openpyxl",
                        date_format="DD/MM/YYYY HH:MM:SS",
                        datetime_format="DD/MM/YYYY HH:MM:SS") as writer:
        df.to_excel(writer, sheet_name="Logs", index=False)
        pivot.to_excel(writer, sheet_name="Resumen", startrow=0, index=True)
        resumen_detalles.to_excel(writer, sheet_name="Resumen", startrow=pivot.shape[0] + 4, index=False)

    # === ESTILOS Y GRAFICAS ===
    wb = load_workbook(output_excel)

    # Hoja Logs → encabezados
    ws_logs = wb["Logs"]
    for cell in ws_logs[1]:
        cell.font = Font(bold=True, color="FFFFFF")
        cell.fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

    # Hoja Resumen → encabezados
    ws_resumen = wb["Resumen"]
    for cell in ws_resumen[1]:
        cell.font = Font(bold=True, color="FFFFFF")
        cell.fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

    # Gráfica de barras para intervalos diarios
    max_row = pivot.shape[0] + 1
    max_col = pivot.shape[1] + 1
    chart = BarChart()
    data = Reference(ws_resumen, min_col=2, max_col=max_col, min_row=1, max_row=max_row)
    cats = Reference(ws_resumen, min_col=1, min_row=2, max_row=max_row)
    chart.add_data(data, titles_from_data=True)
    chart.set_categories(cats)
    chart.title = "Distribución por Intervalos (diario)"
    chart.y_axis.title = "Cantidad"
    chart.x_axis.title = "Fecha"
    ws_resumen.add_chart(chart, f"I2")

    wb.save(output_excel)
    print(f"✅ Archivos generados: {output_csv} y {output_excel}")
